import { LazyPoint, Point } from './LazyPoint';
interface LazyBrushOptions {
    radius?: number;
    enabled?: boolean;
    initialPoint?: Point;
}
interface LazyBrushUpdateOptions {
    /**
     * Update both pointer and brush at the same time.
     *
     * This can be used when supporting touch events: On touch start you would
     * update both the pointer and the brush so that the pointer can be "moved"
     * away from the brush until the lazy radius is reached.
     */
    both?: boolean;
    /**
     * Define the friction (value between 0 and 1) for the brush.
     *
     * A value of 0 means "no friction" (default when not set). A value of "1"
     * means infinite friction (the brush won't move at all).
     */
    friction?: number;
}
declare class LazyBrush {
    /**
     * If the lazy brush should be enabled.
     */
    _isEnabled: boolean;
    /**
     * Indicates if the brush has moved in the last update cycle.
     */
    _hasMoved: boolean;
    /**
     * The lazy radius.
     */
    radius: number;
    /**
     * Coordinates of the pointer.
     */
    pointer: LazyPoint;
    /**
     * Coordinates of the brush.
     */
    brush: LazyPoint;
    /**
     * The angle between pointer and brush in the last update cycle.
     */
    angle: number;
    /**
     * The distance between pointer and brush in the last update cycle.
     */
    distance: number;
    /**
     * Constructs a new LazyBrush.
     */
    constructor(options?: LazyBrushOptions);
    /**
     * Enable lazy brush calculations.
     *
     */
    enable(): void;
    /**
     * Disable lazy brush calculations.
     *
     */
    disable(): void;
    /**
     * @returns {boolean}
     */
    isEnabled(): boolean;
    /**
     * Update the radius
     *
     * @param {number} radius
     */
    setRadius(radius: number): void;
    /**
     * Return the current radius
     *
     * @returns {number}
     */
    getRadius(): number;
    /**
     * Return the brush coordinates as a simple object
     *
     * @returns {object}
     */
    getBrushCoordinates(): Point;
    /**
     * Return the pointer coordinates as a simple object
     *
     * @returns {object}
     */
    getPointerCoordinates(): Point;
    /**
     * Return the brush as a LazyPoint
     *
     * @returns {LazyPoint}
     */
    getBrush(): LazyPoint;
    /**
     * Return the pointer as a LazyPoint
     *
     * @returns {LazyPoint}
     */
    getPointer(): LazyPoint;
    /**
     * Return the angle between pointer and brush
     *
     * @returns {number} Angle in radians
     */
    getAngle(): number;
    /**
     * Return the distance between pointer and brush
     *
     * @returns {number} Distance in pixels
     */
    getDistance(): number;
    /**
     * Return if the previous update has moved the brush.
     *
     * @returns {boolean} Whether the brush moved previously.
     */
    brushHasMoved(): boolean;
    /**
     * Updates the pointer point and calculates the new brush point.
     */
    update(newPointerPoint: Point, options?: LazyBrushUpdateOptions): boolean;
}
export default LazyBrush;
